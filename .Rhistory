<<<<<<< HEAD
options(gargle_oauth_cache = ".secrets")
gargle::gargle_oauth_cache()
gs4_auth()
wait_times <- read_csv("../Proj dataset/test_waiting_time.csv")
bed_occ <- read_csv("../Proj dataset/test_BOR.csv")
EMD_attendance <- read_csv("../Proj dataset/test_EMD_attendance.csv")
tidy_wait_times <- wait_times %>%
separate(col = Date, into = c("Day_wk", "Date"), sep = ", ") %>%
mutate(new_Date_format =
parse_date_time(Date, orders = c("mdy", "dmy", "ymd"))) %>%
mutate(Dates = format(new_Date_format, "%d/%m/%Y")) %>%
separate(col = Date, into = c("Day", "Month", "Year"), sep = "/") %>%
gather(key = hospital, value = wait_duration, 5:12 ) %>%
select(Day_wk, Dates, Day, Month, Year, hospital, wait_duration)
tidy_bed_occ <- bed_occ %>%
filter(Years == 2023) %>%
mutate(new_Date_format =
parse_date_time(Date, orders = c("mdy", "dmy", "ymd"))) %>%
mutate(Dates = format(new_Date_format, "%d/%m/%Y")) %>%
gather(key = hospital, value = occ_rate, 3:10) %>%
separate(col = occ_rate, into = c("occ_rate"), sep = "%") %>%
mutate(occ_rate_num = as.numeric(occ_rate)) %>%
select(occ_rate_num)
tidy_EMD_attendance <- EMD_attendance %>%
separate(col = Date, into = c("Day_wk", "Date"), sep = ", ") %>%
mutate(new_Date_format =
parse_date_time(Date, orders = c("mdy", "dmy", "ymd"))) %>%
mutate(Dates = format(new_Date_format, "%d/%m/%Y")) %>%
separate(col = Date, into = c("Day", "Month", "Year"), sep = "/") %>%
gather(key = hospital, value = attendance, 5:12) %>%
select(attendance)
final_dataset <- cbind(tidy_wait_times,tidy_bed_occ,tidy_EMD_attendance)
final_dataset <-
final_dataset %>%
transform(Day = as.numeric(Day)) %>%
mutate(new_Date_format =
parse_date_time(Dates, orders = c("mdy", "dmy", "ymd"))) %>%
mutate(week_num = as.numeric(format(new_Date_format, "%U"))) %>%
mutate(fullmonth = format(new_Date_format, "%b")) %>%
mutate(yearmonth = as.yearmon(new_Date_format)) %>%
mutate(yearmonthf = factor(yearmonth)) %>%
ddply(.(yearmonthf), transform, monthweek=5-week_num+min(week_num)) %>%
select(-new_Date_format,-yearmonth,-yearmonthf)
WT_line <- final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = Dates,
text = paste(wait_duration, "hrs"))) +
geom_point(aes(y = wait_duration), size = 0.75) +
geom_line(aes(y = wait_duration, group = hospital, color = hospital)) +
labs(title = "Waiting Time for Admission to Ward",
subtitle = "January 2023",
x = "Date",
y = "Hours (h)",
colour = "Hospital",
caption = "Source: Ministry of Health") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
BOR_line <- final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = Dates,
text = paste(occ_rate_num, "%"))) +
geom_point(aes(y = occ_rate_num), size = 0.75) +
geom_line(aes(y = occ_rate_num, group = hospital, color = hospital)) +
labs(title = "Bed Occupancy Rate (%)",
subtitle = "January 2023",
x = "Date",
y = "BOR (%)",
colour = "Hospital",
caption = "Source: Ministry of Health") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
EMD_line <- final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = Dates,
text = paste(wait_duration, "patients"))) +
geom_point(aes(y = attendance), size = 0.75) +
=======
>>>>>>> 2d19b8c6fdab110843018c99077710ab68b2bb2f
geom_line(aes(y = attendance, group = hospital, color = hospital)) +
labs(title = "Attendance at Emergency Medicine Department",
subtitle = "January 2023",
x = "Date",
y = "No. of patients",
colour = "Hospital",
caption = "Source: Ministry of Health") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(WT_line, tooltip = "text") %>%
config(displayModeBar = FALSE) %>%
layout(dragmode = FALSE,
title = list(text = paste0('Waiting Time for Admission to Ward',
'<br>',
'<sup>',
'January 2023',
'</sup>')))
ggplotly(BOR_line, tooltip = "text") %>%
config(displayModeBar = FALSE) %>%
layout(dragmode = FALSE,
title = list(text = paste0('Bed Occupancy Rate (%)',
'<br>',
'<sup>',
'January 2023',
'</sup>')))
ggplotly(EMD_line, tooltip = "text") %>%
config(displayModeBar = FALSE) %>%
layout(dragmode = FALSE,
title = list(text = paste0('Attendance at Emergency Medicine Department',
'<br>',
'<sup>',
'January 2023',
'</sup>')))
<<<<<<< HEAD
WT_box <- final_dataset %>%
filter(Month == "01") %>%
transform(hospital = as.factor(hospital)) %>%
ggplot(aes(x = fct_reorder(hospital, desc(hospital)),
y = wait_duration)) +
=======
final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = wait_duration,
y = fct_reorder(hospital, desc(hospital)))) +
>>>>>>> 2d19b8c6fdab110843018c99077710ab68b2bb2f
geom_boxplot(aes(fill = hospital)) +
labs(title = "Waiting Time for Admission to Ward",
subtitle = "January, 2023",
x = "Hours (h)",
y = "Hospital",
caption = "Source: Ministry of Health") +
<<<<<<< HEAD
theme(legend.position = "none") +
coord_flip()
ggplotly(WT_box, tooltip = "text") %>%
config(displayModeBar = FALSE) %>%
layout(dragmode = FALSE,
title = list(text = paste0('Waiting Time for Admission to Ward',
'<br>',
'<sup>',
'January 2023',
'</sup>')))
=======
theme(legend.position = "none")
final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = occ_rate_num,
y = fct_reorder(hospital, desc(hospital)))) +
geom_boxplot(aes(fill = hospital)) +
labs(title = "Bed Occupancy Rate (%)",
subtitle = "January, 2023",
x = "BOR (%)",
y = "Hospital",
caption = "Source: Ministry of Health") +
theme(legend.position = "none")
final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = attendance,
y = fct_reorder(hospital, desc(hospital)))) +
geom_boxplot(aes(fill = hospital)) +
labs(title = "Attendance at Emergency Medicine Department",
subtitle = "January, 2023",
x = "No. of patients",
y = "Hospital",
caption = "Source: Ministry of Health") +
theme(legend.position = "none")
final_dataset %>%
filter(Month == "01",
Day == "01") %>%
ggplot(aes(x = occ_rate_num)) +
geom_col(aes(y = fct_reorder(hospital, desc(hospital)),
fill = hospital)) +
labs(title = "Bed Occupancy Rate (BOR)",
subtitle = "01/01/2023",
x = "BOR (%)",
y = "Hospital",
caption = "Source: Ministry of Health") +
geom_text(aes(occ_rate_num, hospital, label = occ_rate_num),
hjust = 1.3) +
theme(legend.position = "none")
final_dataset %>%
filter(Month == "01",
Day == "01") %>%
ggplot(aes(x = attendance)) +
geom_col(aes(y = fct_reorder(hospital, desc(hospital)),
fill = hospital)) +
labs(title = "Attendance at Emergency Medicine Department",
subtitle = "01/01/2023",
x = "No. of patients",
y = "Hospital",
caption = "Source: Ministry of Health") +
geom_text(aes(attendance, hospital, label = attendance),
hjust = 1.3) +
theme(legend.position = "none")
calendar_plot <- final_dataset %>%
filter(hospital == "AH") %>%
ggplot(aes(x = fct_inorder(Day_wk),
y = monthweek,
fill = wait_duration,
text = paste("Waiting time:", wait_duration, "hrs"))) +
geom_tile(colour = "white") +
geom_text(aes(label = Day),
color = "black",
size = 2) +
facet_wrap( ~ fct_inorder(fullmonth),
ncol = 3,
scales = "fixed") +
scale_fill_gradient(low="green", high = "red") +
labs(x = "Alexandra Hospital (2023)",
y = "",
title = "Waiting Time for Admission to Ward",
subtitle = "Alexandra Hospital (2023)",
fill = "Hours (h)",
caption = "Source: Ministry of Health") +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
theme(panel.spacing.y = unit(1.1, "cm"))
ggplotly(calendar_plot, tooltip = "text") %>%
config(displayModeBar = FALSE) %>%
layout(dragmode = FALSE)
final_dataset %>%
filter(Month == "01",
hospital == "AH") %>%
ggplot(aes(x = Dates)) +
geom_col(aes(y = occ_rate_num/10), fill = "lightgrey") +
geom_point(aes(y = wait_duration), size = 2) +
geom_line(aes(y = wait_duration, group = hospital, color = hospital), size = 0.75) +
labs(title = "Waiting Time for Admission to Ward & Bed Occupancy Rate (BOR)",
subtitle = "Alexandra Hospital (Jan, 2023)",
x = "Date",
y = "Hours (h)",
caption = "Source: Ministry of Health") +
theme(legend.position = "none") +
scale_y_continuous(sec.axis = sec_axis(~.*10, name = "BOR (%)")) +
scale_x_discrete(guide = guide_axis(angle = 45))
final_dataset %>%
filter(Month == "01",
hospital == "AH") %>%
ggplot(aes(x = Dates)) +
geom_col(aes(y = attendance/10), fill = "lightgrey") +
geom_point(aes(y = wait_duration), size = 2) +
geom_line(aes(y = wait_duration, group = hospital, color = hospital), size = 0.75) +
labs(title = "Waiting Time for Admission to Ward & EMD Attendance",
subtitle = "Alexandra Hospital (Jan, 2023)",
x = "Date",
y = "Hours (h)",
caption = "Source: Ministry of Health") +
theme(legend.position = "none") +
scale_y_continuous(sec.axis = sec_axis(~.*10, name = "EMD Attendance")) +
scale_x_discrete(guide = guide_axis(angle = 45))
final_dataset %>%
filter(Month == "01",
hospital == "AH") %>%
ggplot(aes(wait_duration, occ_rate_num)) +
geom_point() +
geom_smooth(method = "lm", se=F) +
labs(title = "Waiting Time for Admission to Ward & Bed Occupancy Rate (BOR)",
subtitle = "Alexandra Hospital (Jan, 2023)",
x = "Hours (h)",
y = "BOR (%)",
caption = "Source: Ministry of Health")
final_dataset %>%
filter(Month == "01",
hospital == "AH") %>%
ggplot(aes(wait_duration, attendance)) +
geom_point() +
geom_smooth(method = "lm", se=F) +
labs(title = "Waiting Time for Admission to Ward & EMD attendance",
subtitle = "Alexandra Hospital (Jan, 2023)",
x = "Hours (h)",
y = "No. of patients",
caption = "Source: Ministry of Health")
library(tidyverse)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(plyr)
library(scales)
library(zoo)
library(leaflet)
library(htmltools)
library(plotly)
library(ggh4x)
library(ggrepel)
wait_times <- read_csv("../Proj dataset/test_waiting_time.csv")
library(tidyverse)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(plyr)
library(scales)
library(zoo)
library(leaflet)
library(htmltools)
library(plotly)
library(ggh4x)
library(ggrepel)
wait_times <- read_csv("test_waiting_time.csv")
library(tidyverse)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(plyr)
library(scales)
library(zoo)
library(leaflet)
library(htmltools)
library(plotly)
library(ggh4x)
library(ggrepel)
wait_times <- read_csv("../test_waiting_time.csv")
library(tidyverse)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(plyr)
library(scales)
library(zoo)
library(leaflet)
library(htmltools)
library(plotly)
library(ggh4x)
library(ggrepel)
wait_times <- read_csv("../Proj dataset/test_waiting_time.csv")
setwd("~/GitHub/bocongg.github.io")
library(tidyverse)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(plyr)
library(scales)
library(zoo)
library(leaflet)
library(htmltools)
library(plotly)
library(ggh4x)
library(ggrepel)
wait_times <- read_csv("../Proj dataset/test_waiting_time.csv")
library(tidyverse)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(plyr)
library(scales)
library(zoo)
library(leaflet)
library(htmltools)
library(plotly)
library(ggh4x)
library(ggrepel)
wait_times <- read_csv("test_waiting_time.csv")
library(tidyverse)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(plyr)
library(scales)
library(zoo)
library(leaflet)
library(htmltools)
library(plotly)
library(ggh4x)
library(ggrepel)
wait_times <- read_csv("./Proj dataset/test_waiting_time.csv")
bed_occ <- read_csv("./Proj dataset/test_BOR.csv")
EMD_attendance <- read_csv("./Proj dataset/test_EMD_attendance.csv")
tidy_wait_times <- wait_times %>%
separate(col = Date, into = c("Day_wk", "Date"), sep = ", ") %>%
mutate(new_Date_format =
parse_date_time(Date, orders = c("mdy", "dmy", "ymd"))) %>%
mutate(Dates = format(new_Date_format, "%d/%m/%Y")) %>%
separate(col = Date, into = c("Day", "Month", "Year"), sep = "/") %>%
gather(key = hospital, value = wait_duration, 5:12 ) %>%
select(Day_wk, Dates, Day, Month, Year, hospital, wait_duration)
tidy_bed_occ <- bed_occ %>%
filter(Years == 2023) %>%
mutate(new_Date_format =
parse_date_time(Date, orders = c("mdy", "dmy", "ymd"))) %>%
mutate(Dates = format(new_Date_format, "%d/%m/%Y")) %>%
gather(key = hospital, value = occ_rate, 3:10) %>%
separate(col = occ_rate, into = c("occ_rate"), sep = "%") %>%
mutate(occ_rate_num = as.numeric(occ_rate)) %>%
select(occ_rate_num)
tidy_EMD_attendance <- EMD_attendance %>%
separate(col = Date, into = c("Day_wk", "Date"), sep = ", ") %>%
mutate(new_Date_format =
parse_date_time(Date, orders = c("mdy", "dmy", "ymd"))) %>%
mutate(Dates = format(new_Date_format, "%d/%m/%Y")) %>%
separate(col = Date, into = c("Day", "Month", "Year"), sep = "/") %>%
gather(key = hospital, value = attendance, 5:12) %>%
select(attendance)
final_dataset <- cbind(tidy_wait_times,tidy_bed_occ,tidy_EMD_attendance)
final_dataset <-
final_dataset %>%
mutate(new_Date_format =
parse_date_time(Dates, orders = c("mdy", "dmy", "ymd"))) %>%
mutate(week_num = as.numeric(format(new_Date_format, "%U"))) %>%
mutate(fullmonth = format(new_Date_format, "%b")) %>%
mutate(yearmonth = as.yearmon(new_Date_format)) %>%
mutate(yearmonthf = factor(yearmonth)) %>%
ddply(.(yearmonthf), transform, monthweek=5-week_num+min(week_num)) %>%
select(-new_Date_format,-yearmonth,-yearmonthf)
WT_line <- final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = Dates,
text = paste(wait_duration, "hrs"))) +
geom_point(aes(y = wait_duration), size = 0.75) +
geom_line(aes(y = wait_duration, group = hospital, color = hospital)) +
labs(title = "Waiting Time for Admission to Ward",
subtitle = "January 2023",
x = "Date",
y = "Hours (h)",
colour = "Hospital",
caption = "Source: Ministry of Health") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
BOR_line <- final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = Dates,
text = paste(occ_rate_num, "%"))) +
geom_point(aes(y = occ_rate_num), size = 0.75) +
geom_line(aes(y = occ_rate_num, group = hospital, color = hospital)) +
labs(title = "Bed Occupancy Rate (%)",
subtitle = "January 2023",
x = "Date",
y = "BOR (%)",
colour = "Hospital",
caption = "Source: Ministry of Health") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
EMD_line <- final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = Dates,
text = paste(wait_duration, "patients"))) +
geom_point(aes(y = attendance), size = 0.75) +
geom_line(aes(y = attendance, group = hospital, color = hospital)) +
labs(title = "Attendance at Emergency Medicine Department",
subtitle = "January 2023",
x = "Date",
y = "No. of patients",
colour = "Hospital",
caption = "Source: Ministry of Health") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(WT_line, tooltip = "text") %>%
config(displayModeBar = FALSE) %>%
layout(dragmode = FALSE,
title = list(text = paste0('Waiting Time for Admission to Ward',
'<br>',
'<sup>',
'January 2023',
'</sup>')))
ggplotly(BOR_line, tooltip = "text") %>%
config(displayModeBar = FALSE) %>%
layout(dragmode = FALSE,
title = list(text = paste0('Bed Occupancy Rate (%)',
'<br>',
'<sup>',
'January 2023',
'</sup>')))
ggplotly(EMD_line, tooltip = "text") %>%
config(displayModeBar = FALSE) %>%
layout(dragmode = FALSE,
title = list(text = paste0('Attendance at Emergency Medicine Department',
'<br>',
'<sup>',
'January 2023',
'</sup>')))
final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = wait_duration,
y = fct_reorder(hospital, desc(hospital)))) +
geom_boxplot(aes(fill = hospital)) +
labs(title = "Waiting Time for Admission to Ward",
subtitle = "January, 2023",
x = "Hours (h)",
y = "Hospital",
caption = "Source: Ministry of Health") +
theme(legend.position = "none")
>>>>>>> 2d19b8c6fdab110843018c99077710ab68b2bb2f
final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = occ_rate_num,
y = fct_reorder(hospital, desc(hospital)))) +
geom_boxplot(aes(fill = hospital)) +
labs(title = "Bed Occupancy Rate (%)",
subtitle = "January, 2023",
x = "BOR (%)",
y = "Hospital",
caption = "Source: Ministry of Health") +
theme(legend.position = "none")
final_dataset %>%
filter(Month == "01") %>%
ggplot(aes(x = attendance,
y = fct_reorder(hospital, desc(hospital)))) +
geom_boxplot(aes(fill = hospital)) +
labs(title = "Attendance at Emergency Medicine Department",
subtitle = "January, 2023",
x = "No. of patients",
y = "Hospital",
caption = "Source: Ministry of Health") +
theme(legend.position = "none")
final_dataset %>%
filter(Month == "01",
Day == "01") %>%
ggplot(aes(x = occ_rate_num)) +
geom_col(aes(y = fct_reorder(hospital, desc(hospital)),
fill = hospital)) +
labs(title = "Bed Occupancy Rate (BOR)",
subtitle = "01/01/2023",
x = "BOR (%)",
y = "Hospital",
caption = "Source: Ministry of Health") +
geom_text(aes(occ_rate_num, hospital, label = occ_rate_num),
hjust = 1.3) +
theme(legend.position = "none")
final_dataset %>%
filter(Month == "01",
Day == "01") %>%
ggplot(aes(x = attendance)) +
geom_col(aes(y = fct_reorder(hospital, desc(hospital)),
fill = hospital)) +
labs(title = "Attendance at Emergency Medicine Department",
subtitle = "01/01/2023",
x = "No. of patients",
y = "Hospital",
caption = "Source: Ministry of Health") +
geom_text(aes(attendance, hospital, label = attendance),
hjust = 1.3) +
theme(legend.position = "none")
calendar_plot <- final_dataset %>%
filter(hospital == "AH") %>%
ggplot(aes(x = fct_inorder(Day_wk),
y = monthweek,
fill = wait_duration,
text = paste("Waiting time:", wait_duration, "hrs"))) +
geom_tile(colour = "white") +
geom_text(aes(label = Day),
color = "black",
size = 2) +
facet_wrap( ~ fct_inorder(fullmonth),
ncol = 3,
scales = "fixed") +
scale_fill_gradient(low="green", high = "red") +
labs(x = "Alexandra Hospital (2023)",
y = "",
title = "Waiting Time for Admission to Ward",
subtitle = "Alexandra Hospital (2023)",
fill = "Hours (h)",
caption = "Source: Ministry of Health") +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
theme(panel.spacing.y = unit(1.1, "cm"))
ggplotly(calendar_plot, tooltip = "text") %>%
config(displayModeBar = FALSE) %>%
layout(dragmode = FALSE)
final_dataset %>%
filter(Month == "01",
hospital == "AH") %>%
ggplot(aes(x = Dates)) +
geom_col(aes(y = occ_rate_num/10), fill = "lightgrey") +
geom_point(aes(y = wait_duration), size = 2) +
geom_line(aes(y = wait_duration, group = hospital, color = hospital), size = 0.75) +
labs(title = "Waiting Time for Admission to Ward & Bed Occupancy Rate (BOR)",
subtitle = "Alexandra Hospital (Jan, 2023)",
x = "Date",
y = "Hours (h)",
caption = "Source: Ministry of Health") +
theme(legend.position = "none") +
scale_y_continuous(sec.axis = sec_axis(~.*10, name = "BOR (%)")) +
scale_x_discrete(guide = guide_axis(angle = 45))
final_dataset %>%
filter(Month == "01",
hospital == "AH") %>%
ggplot(aes(x = Dates)) +
geom_col(aes(y = attendance/10), fill = "lightgrey") +
geom_point(aes(y = wait_duration), size = 2) +
geom_line(aes(y = wait_duration, group = hospital, color = hospital), size = 0.75) +
labs(title = "Waiting Time for Admission to Ward & EMD Attendance",
subtitle = "Alexandra Hospital (Jan, 2023)",
x = "Date",
y = "Hours (h)",
caption = "Source: Ministry of Health") +
theme(legend.position = "none") +
scale_y_continuous(sec.axis = sec_axis(~.*10, name = "EMD Attendance")) +
scale_x_discrete(guide = guide_axis(angle = 45))
final_dataset %>%
filter(Month == "01",
hospital == "AH") %>%
ggplot(aes(wait_duration, occ_rate_num)) +
geom_point() +
geom_smooth(method = "lm", se=F) +
labs(title = "Waiting Time for Admission to Ward & Bed Occupancy Rate (BOR)",
subtitle = "Alexandra Hospital (Jan, 2023)",
x = "Hours (h)",
y = "BOR (%)",
caption = "Source: Ministry of Health")
final_dataset %>%
filter(Month == "01",
hospital == "AH") %>%
ggplot(aes(wait_duration, attendance)) +
geom_point() +
geom_smooth(method = "lm", se=F) +
labs(title = "Waiting Time for Admission to Ward & EMD attendance",
subtitle = "Alexandra Hospital (Jan, 2023)",
x = "Hours (h)",
y = "No. of patients",
caption = "Source: Ministry of Health")
<<<<<<< HEAD
runApp('proj_app')
runApp('proj_app')
setwd("C:/Users/bcong/Desktop/Uni Materials/NM2207 Computational Media Literacy/bocongg.github.io")
runApp('proj_app')
shiny::runApp('proj_app')
runApp('proj_app')
runApp('C:/Users/bcong/Desktop/Uni Materials/NM2207 Computational Media Literacy/bocongg1.github.io/proj_app')
runApp('C:/Users/bcong/Desktop/Uni Materials/NM2207 Computational Media Literacy/bocongg1.github.io/proj_app')
runApp('app_backup.R')
library(gridlayout)
library(shiny)
library(bslib)
#>
#> Attaching package: ‘bslib’
#> The following object is masked from ‘package:utils’:
#>
#>     page
ui <- grid_page(
layout = c(
"header  header",
"sidebar plots"
),
row_sizes = c("50px", "1fr"),
col_sizes = c("250px", "1fr"),
grid_card_text("header", "This is my header"),
grid_card(
"sidebar",
card_header("Settings"),
sliderInput("bins","Number of bins:", 1, 50, 30, width = "100%")
),
grid_nested(
"plots",
title = "Plots - in technicolor",
layout = c(
"distPlot distPlot distPlot",
"redPlot  bluePlot greenPlot"
),
grid_card_plot("distPlot"),
grid_card_plot("redPlot"),
grid_card_plot("bluePlot"),
grid_card_plot("greenPlot")
)
)
drawHist <- function(nbins, color) {
x <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = nbins + 1)
hist(x, breaks = bins, col = color, border = "white")
}
server <- function(input, output) {
output$distPlot <- renderPlot(drawHist(input$bins, "darkgray"))
output$redPlot <- renderPlot(drawHist(input$bins, "orangered"))
output$bluePlot <- renderPlot(drawHist(input$bins, "steelblue"))
output$greenPlot <- renderPlot(drawHist(input$bins, "forestgreen"))
}
if(FALSE){
shinyApp(ui, server)
}
runApp()
if(FALSE){
shinyApp(ui, server)
}
library(gridlayout)
library(shiny)
library(bslib)
#>
#> Attaching package: ‘bslib’
#> The following object is masked from ‘package:utils’:
#>
#>     page
ui <- grid_page(
layout = c(
"header  header",
"sidebar plots"
),
row_sizes = c("50px", "1fr"),
col_sizes = c("250px", "1fr"),
grid_card_text("header", "This is my header"),
grid_card(
"sidebar",
card_header("Settings"),
sliderInput("bins","Number of bins:", 1, 50, 30, width = "100%")
),
grid_nested(
"plots",
title = "Plots - in technicolor",
layout = c(
"distPlot distPlot distPlot",
"redPlot  bluePlot greenPlot"
),
grid_card_plot("distPlot"),
grid_card_plot("redPlot"),
grid_card_plot("bluePlot"),
grid_card_plot("greenPlot")
)
)
drawHist <- function(nbins, color) {
x <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = nbins + 1)
hist(x, breaks = bins, col = color, border = "white")
}
server <- function(input, output) {
output$distPlot <- renderPlot(drawHist(input$bins, "darkgray"))
output$redPlot <- renderPlot(drawHist(input$bins, "orangered"))
output$bluePlot <- renderPlot(drawHist(input$bins, "steelblue"))
output$greenPlot <- renderPlot(drawHist(input$bins, "forestgreen"))
}
if(FALSE){
shinyApp(ui, server)
}
source("C:/Users/bcong/Desktop/Uni Materials/NM2207 Computational Media Literacy/bocongg.github.io/app_backup.R", echo=TRUE)
?selectInput
?selectInput
runApp('app_backup.R')
runApp('app_backup.R')
runApp('app_backup.R')
?checkboxGroupInput
runApp('app_backup.R')
runApp('app_backup.R')
?nav_panel
ui <- grid_page(
layout = c(
"header       header      ",
"datesettings hospsettings",
"tabset       tabset      "
),
gap_size = "1px",
col_sizes = c("0.90fr","1.10fr"),
row_sizes = c("50px","270px","1fr"),
grid_card_text(
area = "header",
content = "Data Dashboard",
alignment = "start",
is_title = FALSE
),
grid_card(
area = "datesettings",
card_header("Select Date:"),
card_body(
grid_container(
layout = c("startdate enddate"),
gap_size = "0px",
col_sizes = c("1fr","1fr"),
row_sizes = c("1fr"),
grid_card(
area = "startdate",
card_body(
selectInputdate("startmthInput",setlabel = "Start Date"),
sliderInputdate("startdateId",1)
)
),
grid_card(
area = "enddate",
card_body(
selectInputdate("endmthInput",setlabel = "End Date"),
sliderInputdate("enddateId",31)
)
)
)
)
),
grid_card(
area = "hospsettings",
card_header("Select Hospital(s):"),
card_body(
grid_container(
layout = c("selecthosp1 selecthosp2 selecthosp3"),
row_sizes = c("1fr"),
col_sizes = c("1fr","1fr","1fr"),
gap_size = "0px",
grid_card(
area = "selecthosp1",
card_body(
checkboxGroupInputhosp("SH")
)
),
grid_card(
area = "selecthosp2",
card_body(
checkboxGroupInputhosp("NUHS")
)
),
grid_card(
area = "selecthosp3",
card_body(
checkboxGroupInputhosp("NHG")
)
)
)
)
),
grid_card(
area = "tabset",
card_body(
tabsetPanel(
nav_panel(
title = "Waiting Time",
grid_container(
layout = c("linechart","boxplot"),
gap_size = "10px",
col_sizes = c("1fr"),
row_sizes = c("1fr","1fr"),
grid_card(
area = "linechart",
full_screen = TRUE,
card_body(plotlyOutput(outputId = "WTlineplot"))
),
grid_card(
area = "boxplot",
full_screen = TRUE,
card_body(plotlyOutput(outputId = "WTboxplot"))
)
),
icon = icon("clock")
),
nav_panel(
title = "Bed Occupancy Rate",
grid_container(
layout = c("linechart","boxplot"),
gap_size = "10px",
col_sizes = c("1fr"),
row_sizes = c("1fr","1fr"),
grid_card(
area = "linechart",
full_screen = TRUE,
card_body(plotlyOutput(outputId = "BORlineplot"))
),
grid_card(
area = "boxplot",
full_screen = TRUE,
card_body(plotlyOutput(outputId = "BORboxplot"))
)
)
),
nav_panel(
title = "EMD Attendance",
grid_container(
layout = c("linechart","boxplot"),
gap_size = "10px",
col_sizes = c("1fr"),
row_sizes = c("1fr","1fr"),
grid_card(
area = "linechart",
full_screen = TRUE,
card_body(plotlyOutput(outputId = "EMDlineplot"))
),
grid_card(
area = "boxplot",
full_screen = TRUE,
card_body(plotlyOutput(outputId = "EMDboxplot"))
)
)
)
)
)
)
)
=======
>>>>>>> 2d19b8c6fdab110843018c99077710ab68b2bb2f
